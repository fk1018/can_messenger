module CanMessenger
  class Messenger
    @can_interface: String
    @logger: Logger
    @listening: bool

    def initialize: (interface_name: String, logger: Logger?, endianness: Symbol) -> void
    def send_can_message: (id: Integer, data: Array[Integer]) -> void
    def start_listening: (
        ?filter: (Integer | Range[Integer] | Array[Integer])?
      ) { (message: { id: Integer, data: Array[Integer] }) -> void } -> void
    def stop_listening: () -> void

    private

    def open_can_socket: () -> (Socket | nil)
    def with_socket: () { (socket: Socket) -> void } -> void
    def process_message: (socket: Socket, filter: (Integer | Range[Integer] | Array[Integer])?, &block: (Proc { (message: { id: Integer, data: Array[Integer] }) -> void })) -> void
    def receive_message: (socket: Socket) -> ({ id: Integer, data: Array[Integer] } | nil)
    def parse_frame: (frame: String) -> ({ id: Integer, data: Array[Integer] } | nil)
    def matches_filter?: (message_id: Integer, filter: (Integer | Range[Integer] | Array[Integer])?) -> bool
  end
end
